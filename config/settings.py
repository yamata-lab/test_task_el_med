"""
Django settings for the Migration Management project.

Generated by 'django-admin startproject' using Django 4.2.7.

This settings file is configured to use python-decouple to separate configuration
from the code, following the 12-Factor App methodology. Sensitive values and
environment-specific settings are loaded from a .env file or environment variables.
"""

from pathlib import Path
from decouple import config, Csv
import dj_database_url
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# --- Core Settings ---

# A fallback secret key for development environments. In production, this MUST
# be overridden via an environment variable.
SECRET_KEY = config(
    "SECRET_KEY",
    default="django-insecure-fallback-key-for-development-only",
)

# WARNING: Do not run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

# A list of strings representing the host/domain names that this Django site can serve.
ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="127.0.0.1,localhost", cast=Csv())


# --- Security ---

# Primary key for django-encrypted-model-fields.
# This key MUST be kept secret and managed securely (e.g., via environment variables).
FIELD_ENCRYPTION_KEY = config("FIELD_ENCRYPTION_KEY", default="")


# --- Application Definitions ---

INSTALLED_APPS = [
    # Django Core Apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-Party Apps
    "rest_framework",
    "rest_framework_simplejwt",
    "encrypted_model_fields",
    "drf_spectacular",

    # Local Project Apps
    "apps.common.apps.CommonConfig",
    "apps.workloads.apps.WorkloadsConfig",
    "apps.migration_manager.apps.MigrationManagerConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"


REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    # Set JWT as the default authentication mechanism
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # Enforce that all endpoints require authentication by default
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'Migration Management API',
    'DESCRIPTION': 'API for managing workload migrations from on-premise to cloud environments.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# --- Database ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# dj_database_url parses the DATABASE_URL environment variable and returns a
# Django database configuration dictionary. This provides a flexible way
# to configure the database for different environments (e.g., local SQLite, production PostgreSQL).
DATABASES = {
    'default': dj_database_url.config(
        # Fallback to a local SQLite database if DATABASE_URL is not set.
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        # The lifetime of a database connection, in seconds. `None` for unlimited.
        conn_max_age=600
    )
}


# --- Password Validation ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# --- Internationalization ---
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# --- Static Files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"


# --- Default Primary Key Field Type ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# --- Celery Configuration ---
# https://docs.celeryq.dev/en/stable/userguide/configuration.html

# The URL of the message broker (e.g., Redis) that Celery uses to send and receive messages.
CELERY_BROKER_URL = config("REDIS_URL", default="redis://localhost:6379/0")

# The backend used to store task results and states. Using the broker URL is a
# common and simple configuration for Redis.
CELERY_RESULT_BACKEND = CELERY_BROKER_URL

# Using JSON for serialization is recommended for interoperability.
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s",
        },
        "simple": {
            "format": "%(levelname)s %(message)s",
        },
        "json": {
            "class": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "format": "%(asctime)s %(name)s %(levelname)s %(message)s %(lineno)d",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "json" if not DEBUG else "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "apps": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
    },
}
